{"version":3,"sources":["webpack:///./src/app/register/register.module.ts","webpack:///./src/app/register/register.page.html","webpack:///./src/app/register/register.page.scss","webpack:///./src/app/register/register.page.ts"],"names":[],"mappings":"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","file":"register-register-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Registration</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-list>\\n        <ion-item>\\n          <ion-label position = \\\"floating\\\">Email</ion-label>\\n          <ion-input type=\\\"text\\\" [(ngModel)]=\\\"username\\\"></ion-input>\\n        </ion-item>\\n    \\n        <ion-item>\\n            <ion-label position = \\\"floating\\\">Password</ion-label>\\n            <ion-input type=\\\"password\\\" [(ngModel)]=\\\"password\\\"></ion-input>\\n        </ion-item>\\n\\n        <ion-item>\\n            <ion-label position = \\\"floating\\\">Confirm Password</ion-label>\\n            <ion-input type=\\\"password\\\" [(ngModel)]=\\\"cpassword\\\"></ion-input>\\n        </ion-item>\\n        </ion-list>\\n        <ion-list>\\n          <ion-item>\\n            <ion-label>Pick User Type</ion-label>\\n            <ion-select [(ngModel)]=\\\"userType\\\" placeholder=\\\"Select One\\\">\\n              <ion-select-option value=\\\"customer\\\">Customer</ion-select-option>\\n              <ion-select-option value=\\\"owner\\\">Resturant Owner</ion-select-option>\\n              <ion-select-option value=\\\"deliver\\\">Deliverer</ion-select-option>\\n            </ion-select>\\n          </ion-item>\\n          </ion-list>\\n          \\n          \\n    \\n          <ion-list>\\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">First Name</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"user_firstName\\\"></ion-input>\\n              </ion-item>\\n              \\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">Last Name</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"user_lastName\\\"></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">Contact Number</ion-label>\\n                <ion-input type = \\\"tel\\\" [(ngModel)]=\\\"contactNumber\\\" maxlength=10></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">Street Address</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"streetAddress\\\"></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">City</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"city\\\"></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">State</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"state\\\"></ion-input>\\n              </ion-item>\\n              <ion-item *ngIf=\\\"userType =='customer'\\\">\\n                <ion-label position= \\\"floating\\\">Zipcode</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"zipcode\\\"></ion-input>\\n              </ion-item>\\n          \\n              <!--Owner pop up fields-->\\n              <ion-item *ngIf = \\\"userType =='owner'\\\">\\n                <ion-header>Personal Information</ion-header>\\n              </ion-item>\\n\\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">First Name</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"user_firstName\\\"></ion-input>\\n              </ion-item>\\n              \\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">Last Name</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"user_lastName\\\"></ion-input>\\n              </ion-item>\\n\\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">Contact Number</ion-label>\\n                <ion-input type = \\\"tel\\\" [(ngModel)]=\\\"contactNumber\\\" maxlength=10></ion-input>\\n              </ion-item>\\n\\n              <br>\\n\\n              <ion-item *ngIf = \\\"userType =='owner'\\\">\\n                <ion-header>Resturant Information</ion-header>\\n              </ion-item>\\n              <ion-item *ngIf=\\\"userType=='owner'\\\">\\n                <ion-label position= \\\"floating\\\">Resturant Name</ion-label>\\n                <ion-input type = \\\"resturantName\\\" [(ngModel)]=\\\"resturantName\\\"></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">Contact Number</ion-label>\\n                <ion-input type = \\\"tel\\\" [(ngModel)]=\\\"resContactNumber\\\" maxlength=10></ion-input>\\n              </ion-item>\\n\\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">Street Address</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"streetAddress\\\"></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">City</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"city\\\"></ion-input>\\n              </ion-item>\\n          \\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">State</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"state\\\"></ion-input>\\n              </ion-item>\\n              <ion-item *ngIf=\\\"userType =='owner'\\\">\\n                <ion-label position= \\\"floating\\\">Zipcode</ion-label>\\n                <ion-input type = \\\"text\\\" [(ngModel)]=\\\"zipcode\\\"></ion-input>\\n              </ion-item>\\n          \\n              <!--Deliverer pop up fields-->\\n              <ion-item *ngIf=\\\"userType == 'deliver'\\\">\\n                <ion-label position= \\\"floating\\\">First Name: </ion-label>\\n                <ion-input type = \\\"firstName\\\" [(ngModel)]=\\\"user_firstName\\\"></ion-input>\\n              </ion-item>\\n              <ion-item *ngIf=\\\"userType == 'deliver'\\\">\\n                <ion-label position= \\\"floating\\\">Last Name: </ion-label>\\n                <ion-input type = \\\"firstName\\\" [(ngModel)]=\\\"user_lastName\\\"></ion-input>\\n              </ion-item>\\n            </ion-list>\\n          \\n            <ion-button fill=\\\"solid\\\" expand=\\\"block\\\" color=\\\"dark\\\" (click)=\\\"register()\\\">Submit</ion-button>\\n            <ion-button expand = 'block' color = \\\"dark\\\" href=\\\"/login\\\" routerDirection=\\\"forward\\\">Login</ion-button>\\n            <br />\\n          \\n   \\n\\n      \\n</ion-content>\\n\"","module.exports = \"ion-title {\\n  position: relative;\\n  text-align: center; }\\n\\nion-content {\\n  --ion-background-color: rgb(243, 243, 243); }\\n\\nion-header {\\n  --ion-background-color: rgb(196, 196, 196); }\\n\\nion-img {\\n  height: 45px;\\n  width: auto; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zaGVsYnlib3VuZHMvMzg3cHJvamVjdDIvc3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBa0I7RUFDbEIsa0JBQWtCLEVBQUE7O0FBR3RCO0VBQ0ksMENBQXVCLEVBQUE7O0FBRTNCO0VBQ0ssMENBQXVCLEVBQUE7O0FBSTVCO0VBQ0ksWUFBWTtFQUNaLFdBQVcsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi10aXRsZXtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG5pb24tY29udGVudCB7XG4gICAgLS1pb24tYmFja2dyb3VuZC1jb2xvcjogcmdiKDI0MywgMjQzLCAyNDMpO1xufVxuaW9uLWhlYWRlciB7XG4gICAgIC0taW9uLWJhY2tncm91bmQtY29sb3I6IHJnYigxOTYsIDE5NiwgMTk2KTtcbn1cblxuXG5pb24taW1nIHtcbiAgICBoZWlnaHQ6IDQ1cHg7XG4gICAgd2lkdGg6IGF1dG87XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport {  NavController, AlertController, ToastController } from '@ionic/angular';\nimport * as firebase from 'firebase/app'; // required for app->firestore communication\nimport 'firebase/firestore'; // required for app->firestore communication\nimport { auth } from 'firebase/app';\nimport { defineBase, restoreView } from '@angular/core/src/render3';\nimport { AngularFirestore } from '@angular/fire/firestore'\nimport { UserService } from '../user.service';\nimport { Register} from '../models/register';\nimport {  MenuController } from '@ionic/angular';\nimport { ResturantService } from '../resturant.service';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\n\nexport class RegisterPage implements OnInit {\n  createSuccess = false;\n  username: string = \"\"\n  password: string = \"\"\n  cpassword: string = \"\"\n  \n  \n  navController: any\n  \n  //user attributes\n  userType: string = \"\"\n\n  resID: string = \"\"\n  uid: string = \"\"\n  user_firstName: string = \"\"\n  user_lastName: string = \"\"\n  contactNumber: string = \"\"\n  streetAddress: string = \"\"\n  city: string = \"\"\n  state: string = \"\"\n  zipcode: number\n\n  resturantName: string = \"\"\n  resContactNumber: string = \"\"\n\n\n\n  \n\n  constructor(\n    public afAuth: AngularFireAuth,\n    private alertCtrl: AlertController,\n    private nav: NavController,\n    public afstore: AngularFirestore,\n    public rest: ResturantService,\n    private us: UserService,\n    public menuCtrl: MenuController,\n    public toast: ToastController\n    ) { \n      //rest.setResturantID(this.resID)\n      //console.log(this.resID)\n    }\n    ionViewWillEnter() {\n      this.menuCtrl.enable(false);\n    }\n  ngOnInit() {\n  }\n\n  \n  async custClick() {\n    console.log(this.userType)\n  }\n  \n\n  async register() {\n    let db = firebase.firestore();\n    const { username, password, cpassword, userType } = this\n    if(password !== cpassword ) {\n      await this.presentAlert('Error',\"Passwords do not match\")\n    }\n    else {\n      if(password == cpassword )\n     \n    try{\n      const res = await this.afAuth.auth.createUserWithEmailAndPassword(username, password).then(async user=>\n        {\n\n          if(userType == \"customer\"){ //if the checkbox is NOT checked (not an owner)\n            console.log(\"customerchecked\")\n            if(isNaN(this.zipcode)||!this.username||!this.user_firstName||!this.user_lastName||!this.contactNumber||!this.streetAddress||!this.city||!this.state){\n              const toast3 = await this.toast.create({\n                message: 'Please enter all fields correctly!',\n                duration: 1000,\n                position: 'top'\n              })\n              return await toast3.present();\n            }\n            else{\n              console.log(\"in else\")\n              try{\n                db.collection(\"users\").doc(user.user.uid).set({\n                  user_name: username,\n                  user_type: 0,\n                  user_id: user.user.uid,\n                  user_firstName: this.user_firstName,\n                  user_lastName: this.user_lastName,\n                  contactNumber: this.contactNumber,\n                  streetAddress: this.streetAddress,\n                  city: this.city,\n                  state: this.state,\n                  zip: this.zipcode\n                });\n              }\n                catch{\n                  console.log(\"error in submitting\");\n                }\n              }\n          }\n          \n          else if (userType == \"owner\") {\n            let resid = this.afstore.createId();\n            db.collection(\"users\").doc(user.user.uid).set({\n             // uid: this.uid,\n              user_name: username,\n              user_type: 1,\n              res_id: resid,\n              user_id: user.user.uid,\n              user_firstName: this.user_firstName,\n              user_lastName: this.user_lastName,\n              contactNumber: this.contactNumber\n            }).then((data)=>{\n              console.log(data)\n            }).catch((error)=>{\n              console.log\n            })\n            try{\n              db.collection('resturant').doc(resid).set({\n                resturantName: this.resturantName,\n                res_id:resid,\n                resContactNumber: this.resContactNumber,\n                streetAddress: this.streetAddress,\n                city: this.city,\n                state: this.state,\n                zip: this.zipcode\n                \n              });\n      \n            } catch(error){\n              console.dir(error)\n            }\n          }\n          \n          else if(userType == \"deliver\"){\n            db.collection(\"users\").doc(user.user.uid).set({\n              user_name: username,\n              user_type: 2,\n              user_id: user.user.uid,\n              user_firstName: this.user_firstName,\n              user_lastName: this.user_lastName\n            }).then((data)=>{\n              console.log(data)\n            }).catch((error)=>{\n              console.log\n            })\n          }\n          \n        })\n      console.log(res)\n      console.log(\"complete create user\")\n    } catch(error) {\n      console.dir(error)\n    }\n    }\n\n   /* this.us.getCurrentUID().subscribe(uid=>\n      {\n        this.uid = uid;\n\n      })*/\n      //doesn't read until after then cant use the uid\n    //console.log(this.uid)\n    //need to create the same uid as the one in firebase\n    \n    //need to add error handling for when a user type is not selected\n  }\nasync presentAlert(title,text) {   \n  let alert = await this.alertCtrl.create({\n        header: title,\n        message: text,\n        buttons: [\n          {\n            text:\"OK\",\n            handler: (data) => {\n              if(this.createSuccess){\n                this.navController.navigateRoot('/login');              \n              }\n              \n            }\n            }\n        ]\n      }); \n    return await alert.present();\n  }\n}"],"sourceRoot":""}